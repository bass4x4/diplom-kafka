package UI;

import org.apache.kafka.clients.producer.KafkaProducer;
import org.apache.kafka.clients.producer.Producer;
import org.apache.kafka.clients.producer.ProducerConfig;
import org.apache.kafka.clients.producer.ProducerRecord;
import org.apache.kafka.common.KafkaException;
import org.apache.kafka.common.serialization.StringSerializer;

import javax.swing.*;
import java.awt.*;
import java.util.Properties;
import java.util.concurrent.ExecutionException;

public class MainMenu {
    private JPanel mainMenuPanel;
    private JSpinner numberOfMessages;
    private JButton sendButton;

    public MainMenu() {
        numberOfMessages.setModel(new SpinnerNumberModel(0, 0, 1000000, 1));
        sendButton.addActionListener(actionEvent -> sendMessages(((int) numberOfMessages.getValue())));
    }

    private void sendMessages(int numberOfMessages) {
        try {
            Producer<String, String> producer = createProducer();
            ProducerRecord<String, String> record = new ProducerRecord("test", "record", "record");
            long start = System.currentTimeMillis();
            for (int i = 0; i < numberOfMessages; i++) {
                try {
                    producer.send(record);
                } catch (Exception e) {
                    JOptionPane.showMessageDialog(null, String.format("Couldn't send the message #%d. Didn't try to send %d messages.", i, numberOfMessages - i));
                    return;
                }
            }
            JOptionPane.showMessageDialog(null, String.format("Took %f second to send %d messages", (System.currentTimeMillis() - start) / 1000F, numberOfMessages));
        } catch (KafkaException e) {
            JOptionPane.showMessageDialog(null, "Couldn't initialize KafkaProducer.");
        }
    }

    public static Producer<String, String> createProducer()  {
        Properties props = new Properties();
        props.put(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG, "1000");
        props.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, "localhost:9092");
        props.put(ProducerConfig.CLIENT_ID_CONFIG, "AnkushevAD");
        props.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());
        return new KafkaProducer<>(props);
    }

    public JPanel getMainMenuPanel() {
        return mainMenuPanel;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainMenuPanel = new JPanel();
        mainMenuPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        numberOfMessages = new JSpinner();
        mainMenuPanel.add(numberOfMessages, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        sendButton = new JButton();
        sendButton.setText("Send");
        mainMenuPanel.add(sendButton, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainMenuPanel;
    }
}
